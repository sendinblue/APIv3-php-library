<?php
/**
 * AbTestCampaignResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  SendinBlue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SendinBlue\Client\Model;

use \ArrayAccess;
use \SendinBlue\Client\ObjectSerializer;

/**
 * AbTestCampaignResult Class Doc Comment
 *
 * @category Class
 * @package  SendinBlue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AbTestCampaignResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'abTestCampaignResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'winning_version' => 'string',
        'winning_criteria' => 'string',
        'winning_subject_line' => 'string',
        'open_rate' => 'string',
        'click_rate' => 'string',
        'winning_version_rate' => 'string',
        'statistics' => '\SendinBlue\Client\Model\AbTestCampaignResultStatistics',
        'clicked_links' => '\SendinBlue\Client\Model\AbTestCampaignResultClickedLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'winning_version' => null,
        'winning_criteria' => null,
        'winning_subject_line' => null,
        'open_rate' => null,
        'click_rate' => null,
        'winning_version_rate' => null,
        'statistics' => null,
        'clicked_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'winning_version' => 'winningVersion',
        'winning_criteria' => 'winningCriteria',
        'winning_subject_line' => 'winningSubjectLine',
        'open_rate' => 'openRate',
        'click_rate' => 'clickRate',
        'winning_version_rate' => 'winningVersionRate',
        'statistics' => 'statistics',
        'clicked_links' => 'clickedLinks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'winning_version' => 'setWinningVersion',
        'winning_criteria' => 'setWinningCriteria',
        'winning_subject_line' => 'setWinningSubjectLine',
        'open_rate' => 'setOpenRate',
        'click_rate' => 'setClickRate',
        'winning_version_rate' => 'setWinningVersionRate',
        'statistics' => 'setStatistics',
        'clicked_links' => 'setClickedLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'winning_version' => 'getWinningVersion',
        'winning_criteria' => 'getWinningCriteria',
        'winning_subject_line' => 'getWinningSubjectLine',
        'open_rate' => 'getOpenRate',
        'click_rate' => 'getClickRate',
        'winning_version_rate' => 'getWinningVersionRate',
        'statistics' => 'getStatistics',
        'clicked_links' => 'getClickedLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WINNING_VERSION_NOT_AVAILABLE = 'notAvailable';
    const WINNING_VERSION_PENDING = 'pending';
    const WINNING_VERSION_TIE = 'tie';
    const WINNING_VERSION_A = 'A';
    const WINNING_VERSION_B = 'B';
    const WINNING_CRITERIA_OPEN = 'Open';
    const WINNING_CRITERIA_CLICK = 'Click';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinningVersionAllowableValues()
    {
        return [
            self::WINNING_VERSION_NOT_AVAILABLE,
            self::WINNING_VERSION_PENDING,
            self::WINNING_VERSION_TIE,
            self::WINNING_VERSION_A,
            self::WINNING_VERSION_B,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinningCriteriaAllowableValues()
    {
        return [
            self::WINNING_CRITERIA_OPEN,
            self::WINNING_CRITERIA_CLICK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['winning_version'] = isset($data['winning_version']) ? $data['winning_version'] : null;
        $this->container['winning_criteria'] = isset($data['winning_criteria']) ? $data['winning_criteria'] : null;
        $this->container['winning_subject_line'] = isset($data['winning_subject_line']) ? $data['winning_subject_line'] : null;
        $this->container['open_rate'] = isset($data['open_rate']) ? $data['open_rate'] : null;
        $this->container['click_rate'] = isset($data['click_rate']) ? $data['click_rate'] : null;
        $this->container['winning_version_rate'] = isset($data['winning_version_rate']) ? $data['winning_version_rate'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['clicked_links'] = isset($data['clicked_links']) ? $data['clicked_links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWinningVersionAllowableValues();
        if (!is_null($this->container['winning_version']) && !in_array($this->container['winning_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'winning_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWinningCriteriaAllowableValues();
        if (!is_null($this->container['winning_criteria']) && !in_array($this->container['winning_criteria'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'winning_criteria', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets winning_version
     *
     * @return string
     */
    public function getWinningVersion()
    {
        return $this->container['winning_version'];
    }

    /**
     * Sets winning_version
     *
     * @param string $winning_version Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
     *
     * @return $this
     */
    public function setWinningVersion($winning_version)
    {
        $allowedValues = $this->getWinningVersionAllowableValues();
        if (!is_null($winning_version) && !in_array($winning_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'winning_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['winning_version'] = $winning_version;

        return $this;
    }

    /**
     * Gets winning_criteria
     *
     * @return string
     */
    public function getWinningCriteria()
    {
        return $this->container['winning_criteria'];
    }

    /**
     * Sets winning_criteria
     *
     * @param string $winning_criteria Criteria choosen for winning version (Open/Click)
     *
     * @return $this
     */
    public function setWinningCriteria($winning_criteria)
    {
        $allowedValues = $this->getWinningCriteriaAllowableValues();
        if (!is_null($winning_criteria) && !in_array($winning_criteria, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'winning_criteria', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['winning_criteria'] = $winning_criteria;

        return $this;
    }

    /**
     * Gets winning_subject_line
     *
     * @return string
     */
    public function getWinningSubjectLine()
    {
        return $this->container['winning_subject_line'];
    }

    /**
     * Sets winning_subject_line
     *
     * @param string $winning_subject_line Subject Line of current winning version
     *
     * @return $this
     */
    public function setWinningSubjectLine($winning_subject_line)
    {
        $this->container['winning_subject_line'] = $winning_subject_line;

        return $this;
    }

    /**
     * Gets open_rate
     *
     * @return string
     */
    public function getOpenRate()
    {
        return $this->container['open_rate'];
    }

    /**
     * Sets open_rate
     *
     * @param string $open_rate Open rate for current winning version
     *
     * @return $this
     */
    public function setOpenRate($open_rate)
    {
        $this->container['open_rate'] = $open_rate;

        return $this;
    }

    /**
     * Gets click_rate
     *
     * @return string
     */
    public function getClickRate()
    {
        return $this->container['click_rate'];
    }

    /**
     * Sets click_rate
     *
     * @param string $click_rate Click rate for current winning version
     *
     * @return $this
     */
    public function setClickRate($click_rate)
    {
        $this->container['click_rate'] = $click_rate;

        return $this;
    }

    /**
     * Gets winning_version_rate
     *
     * @return string
     */
    public function getWinningVersionRate()
    {
        return $this->container['winning_version_rate'];
    }

    /**
     * Sets winning_version_rate
     *
     * @param string $winning_version_rate Open/Click rate for the winner version
     *
     * @return $this
     */
    public function setWinningVersionRate($winning_version_rate)
    {
        $this->container['winning_version_rate'] = $winning_version_rate;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \SendinBlue\Client\Model\AbTestCampaignResultStatistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \SendinBlue\Client\Model\AbTestCampaignResultStatistics $statistics statistics
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets clicked_links
     *
     * @return \SendinBlue\Client\Model\AbTestCampaignResultClickedLinks
     */
    public function getClickedLinks()
    {
        return $this->container['clicked_links'];
    }

    /**
     * Sets clicked_links
     *
     * @param \SendinBlue\Client\Model\AbTestCampaignResultClickedLinks $clicked_links clicked_links
     *
     * @return $this
     */
    public function setClickedLinks($clicked_links)
    {
        $this->container['clicked_links'] = $clicked_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


