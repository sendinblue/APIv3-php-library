<?php
/**
 * UpdateEmailCampaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  SendinBlue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SendinBlue\Client\Model;

use \ArrayAccess;
use \SendinBlue\Client\ObjectSerializer;

/**
 * UpdateEmailCampaign Class Doc Comment
 *
 * @category Class
 * @package  SendinBlue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateEmailCampaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateEmailCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tag' => 'string',
        'sender' => '\SendinBlue\Client\Model\UpdateEmailCampaignSender',
        'name' => 'string',
        'html_content' => 'string',
        'html_url' => 'string',
        'scheduled_at' => '\DateTime',
        'subject' => 'string',
        'reply_to' => 'string',
        'to_field' => 'string',
        'recipients' => '\SendinBlue\Client\Model\UpdateEmailCampaignRecipients',
        'attachment_url' => 'string',
        'inline_image_activation' => 'bool',
        'mirror_active' => 'bool',
        'recurring' => 'bool',
        'footer' => 'string',
        'header' => 'string',
        'utm_campaign' => 'string',
        'params' => 'object',
        'send_at_best_time' => 'bool',
        'ab_testing' => 'bool',
        'subject_a' => 'string',
        'subject_b' => 'string',
        'split_rule' => 'int',
        'winner_criteria' => 'string',
        'winner_delay' => 'int',
        'ip_warmup_enable' => 'bool',
        'initial_quota' => 'int',
        'increase_rate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tag' => null,
        'sender' => null,
        'name' => null,
        'html_content' => null,
        'html_url' => 'url',
        'scheduled_at' => 'date-time',
        'subject' => null,
        'reply_to' => 'email',
        'to_field' => null,
        'recipients' => null,
        'attachment_url' => 'url',
        'inline_image_activation' => null,
        'mirror_active' => null,
        'recurring' => null,
        'footer' => null,
        'header' => null,
        'utm_campaign' => null,
        'params' => null,
        'send_at_best_time' => null,
        'ab_testing' => null,
        'subject_a' => null,
        'subject_b' => null,
        'split_rule' => 'int64',
        'winner_criteria' => null,
        'winner_delay' => 'int64',
        'ip_warmup_enable' => null,
        'initial_quota' => 'int64',
        'increase_rate' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tag' => 'tag',
        'sender' => 'sender',
        'name' => 'name',
        'html_content' => 'htmlContent',
        'html_url' => 'htmlUrl',
        'scheduled_at' => 'scheduledAt',
        'subject' => 'subject',
        'reply_to' => 'replyTo',
        'to_field' => 'toField',
        'recipients' => 'recipients',
        'attachment_url' => 'attachmentUrl',
        'inline_image_activation' => 'inlineImageActivation',
        'mirror_active' => 'mirrorActive',
        'recurring' => 'recurring',
        'footer' => 'footer',
        'header' => 'header',
        'utm_campaign' => 'utmCampaign',
        'params' => 'params',
        'send_at_best_time' => 'sendAtBestTime',
        'ab_testing' => 'abTesting',
        'subject_a' => 'subjectA',
        'subject_b' => 'subjectB',
        'split_rule' => 'splitRule',
        'winner_criteria' => 'winnerCriteria',
        'winner_delay' => 'winnerDelay',
        'ip_warmup_enable' => 'ipWarmupEnable',
        'initial_quota' => 'initialQuota',
        'increase_rate' => 'increaseRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tag' => 'setTag',
        'sender' => 'setSender',
        'name' => 'setName',
        'html_content' => 'setHtmlContent',
        'html_url' => 'setHtmlUrl',
        'scheduled_at' => 'setScheduledAt',
        'subject' => 'setSubject',
        'reply_to' => 'setReplyTo',
        'to_field' => 'setToField',
        'recipients' => 'setRecipients',
        'attachment_url' => 'setAttachmentUrl',
        'inline_image_activation' => 'setInlineImageActivation',
        'mirror_active' => 'setMirrorActive',
        'recurring' => 'setRecurring',
        'footer' => 'setFooter',
        'header' => 'setHeader',
        'utm_campaign' => 'setUtmCampaign',
        'params' => 'setParams',
        'send_at_best_time' => 'setSendAtBestTime',
        'ab_testing' => 'setAbTesting',
        'subject_a' => 'setSubjectA',
        'subject_b' => 'setSubjectB',
        'split_rule' => 'setSplitRule',
        'winner_criteria' => 'setWinnerCriteria',
        'winner_delay' => 'setWinnerDelay',
        'ip_warmup_enable' => 'setIpWarmupEnable',
        'initial_quota' => 'setInitialQuota',
        'increase_rate' => 'setIncreaseRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tag' => 'getTag',
        'sender' => 'getSender',
        'name' => 'getName',
        'html_content' => 'getHtmlContent',
        'html_url' => 'getHtmlUrl',
        'scheduled_at' => 'getScheduledAt',
        'subject' => 'getSubject',
        'reply_to' => 'getReplyTo',
        'to_field' => 'getToField',
        'recipients' => 'getRecipients',
        'attachment_url' => 'getAttachmentUrl',
        'inline_image_activation' => 'getInlineImageActivation',
        'mirror_active' => 'getMirrorActive',
        'recurring' => 'getRecurring',
        'footer' => 'getFooter',
        'header' => 'getHeader',
        'utm_campaign' => 'getUtmCampaign',
        'params' => 'getParams',
        'send_at_best_time' => 'getSendAtBestTime',
        'ab_testing' => 'getAbTesting',
        'subject_a' => 'getSubjectA',
        'subject_b' => 'getSubjectB',
        'split_rule' => 'getSplitRule',
        'winner_criteria' => 'getWinnerCriteria',
        'winner_delay' => 'getWinnerDelay',
        'ip_warmup_enable' => 'getIpWarmupEnable',
        'initial_quota' => 'getInitialQuota',
        'increase_rate' => 'getIncreaseRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WINNER_CRITERIA_OPEN = 'open';
    const WINNER_CRITERIA_CLICK = 'click';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinnerCriteriaAllowableValues()
    {
        return [
            self::WINNER_CRITERIA_OPEN,
            self::WINNER_CRITERIA_CLICK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['html_content'] = isset($data['html_content']) ? $data['html_content'] : null;
        $this->container['html_url'] = isset($data['html_url']) ? $data['html_url'] : null;
        $this->container['scheduled_at'] = isset($data['scheduled_at']) ? $data['scheduled_at'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['to_field'] = isset($data['to_field']) ? $data['to_field'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['attachment_url'] = isset($data['attachment_url']) ? $data['attachment_url'] : null;
        $this->container['inline_image_activation'] = isset($data['inline_image_activation']) ? $data['inline_image_activation'] : false;
        $this->container['mirror_active'] = isset($data['mirror_active']) ? $data['mirror_active'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : false;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['utm_campaign'] = isset($data['utm_campaign']) ? $data['utm_campaign'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['send_at_best_time'] = isset($data['send_at_best_time']) ? $data['send_at_best_time'] : null;
        $this->container['ab_testing'] = isset($data['ab_testing']) ? $data['ab_testing'] : false;
        $this->container['subject_a'] = isset($data['subject_a']) ? $data['subject_a'] : null;
        $this->container['subject_b'] = isset($data['subject_b']) ? $data['subject_b'] : null;
        $this->container['split_rule'] = isset($data['split_rule']) ? $data['split_rule'] : null;
        $this->container['winner_criteria'] = isset($data['winner_criteria']) ? $data['winner_criteria'] : null;
        $this->container['winner_delay'] = isset($data['winner_delay']) ? $data['winner_delay'] : null;
        $this->container['ip_warmup_enable'] = isset($data['ip_warmup_enable']) ? $data['ip_warmup_enable'] : false;
        $this->container['initial_quota'] = isset($data['initial_quota']) ? $data['initial_quota'] : null;
        $this->container['increase_rate'] = isset($data['increase_rate']) ? $data['increase_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['split_rule']) && ($this->container['split_rule'] > 50)) {
            $invalidProperties[] = "invalid value for 'split_rule', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['split_rule']) && ($this->container['split_rule'] < 1)) {
            $invalidProperties[] = "invalid value for 'split_rule', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getWinnerCriteriaAllowableValues();
        if (!is_null($this->container['winner_criteria']) && !in_array($this->container['winner_criteria'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'winner_criteria', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['winner_delay']) && ($this->container['winner_delay'] > 168)) {
            $invalidProperties[] = "invalid value for 'winner_delay', must be smaller than or equal to 168.";
        }

        if (!is_null($this->container['winner_delay']) && ($this->container['winner_delay'] < 1)) {
            $invalidProperties[] = "invalid value for 'winner_delay', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['increase_rate']) && ($this->container['increase_rate'] > 100)) {
            $invalidProperties[] = "invalid value for 'increase_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['increase_rate']) && ($this->container['increase_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'increase_rate', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag Tag of the campaign
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \SendinBlue\Client\Model\UpdateEmailCampaignSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \SendinBlue\Client\Model\UpdateEmailCampaignSender $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the campaign
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets html_content
     *
     * @return string
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     *
     * @param string $html_content Body of the message (HTML version). REQUIRED if htmlUrl is empty
     *
     * @return $this
     */
    public function setHtmlContent($html_content)
    {
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url Url which contents the body of the email message. REQUIRED if htmlContent is empty
     *
     * @return $this
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets scheduled_at
     *
     * @return \DateTime
     */
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     *
     * @param \DateTime $scheduled_at UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
     *
     * @return $this
     */
    public function setScheduledAt($scheduled_at)
    {
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the campaign
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return string
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param string $reply_to Email on which campaign recipients will be able to reply to
     *
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets to_field
     *
     * @return string
     */
    public function getToField()
    {
        return $this->container['to_field'];
    }

    /**
     * Sets to_field
     *
     * @param string $to_field To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
     *
     * @return $this
     */
    public function setToField($to_field)
    {
        $this->container['to_field'] = $to_field;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \SendinBlue\Client\Model\UpdateEmailCampaignRecipients
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \SendinBlue\Client\Model\UpdateEmailCampaignRecipients $recipients recipients
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets attachment_url
     *
     * @return string
     */
    public function getAttachmentUrl()
    {
        return $this->container['attachment_url'];
    }

    /**
     * Sets attachment_url
     *
     * @param string $attachment_url Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
     *
     * @return $this
     */
    public function setAttachmentUrl($attachment_url)
    {
        $this->container['attachment_url'] = $attachment_url;

        return $this;
    }

    /**
     * Gets inline_image_activation
     *
     * @return bool
     */
    public function getInlineImageActivation()
    {
        return $this->container['inline_image_activation'];
    }

    /**
     * Sets inline_image_activation
     *
     * @param bool $inline_image_activation Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
     *
     * @return $this
     */
    public function setInlineImageActivation($inline_image_activation)
    {
        $this->container['inline_image_activation'] = $inline_image_activation;

        return $this;
    }

    /**
     * Gets mirror_active
     *
     * @return bool
     */
    public function getMirrorActive()
    {
        return $this->container['mirror_active'];
    }

    /**
     * Sets mirror_active
     *
     * @param bool $mirror_active Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
     *
     * @return $this
     */
    public function setMirrorActive($mirror_active)
    {
        $this->container['mirror_active'] = $mirror_active;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
     *
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string $footer Footer of the email campaign
     *
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string $header Header of the email campaign
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string $utm_campaign Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
     *
     * @return $this
     */
    public function setUtmCampaign($utm_campaign)
    {
        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets params
     *
     * @return object
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param object $params Pass the set of attributes to customize the type 'classic' campaign. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. The 'params' field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets send_at_best_time
     *
     * @return bool
     */
    public function getSendAtBestTime()
    {
        return $this->container['send_at_best_time'];
    }

    /**
     * Sets send_at_best_time
     *
     * @param bool $send_at_best_time Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.
     *
     * @return $this
     */
    public function setSendAtBestTime($send_at_best_time)
    {
        $this->container['send_at_best_time'] = $send_at_best_time;

        return $this;
    }

    /**
     * Gets ab_testing
     *
     * @return bool
     */
    public function getAbTesting()
    {
        return $this->container['ab_testing'];
    }

    /**
     * Sets ab_testing
     *
     * @param bool $ab_testing Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is set to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
     *
     * @return $this
     */
    public function setAbTesting($ab_testing)
    {
        $this->container['ab_testing'] = $ab_testing;

        return $this;
    }

    /**
     * Gets subject_a
     *
     * @return string
     */
    public function getSubjectA()
    {
        return $this->container['subject_a'];
    }

    /**
     * Sets subject_a
     *
     * @param string $subject_a Subject A of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
     *
     * @return $this
     */
    public function setSubjectA($subject_a)
    {
        $this->container['subject_a'] = $subject_a;

        return $this;
    }

    /**
     * Gets subject_b
     *
     * @return string
     */
    public function getSubjectB()
    {
        return $this->container['subject_b'];
    }

    /**
     * Sets subject_b
     *
     * @param string $subject_b Subject B of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
     *
     * @return $this
     */
    public function setSubjectB($subject_b)
    {
        $this->container['subject_b'] = $subject_b;

        return $this;
    }

    /**
     * Gets split_rule
     *
     * @return int
     */
    public function getSplitRule()
    {
        return $this->container['split_rule'];
    }

    /**
     * Sets split_rule
     *
     * @param int $split_rule Add the size of your test groups. Considered if abTesting = true. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
     *
     * @return $this
     */
    public function setSplitRule($split_rule)
    {

        if (!is_null($split_rule) && ($split_rule > 50)) {
            throw new \InvalidArgumentException('invalid value for $split_rule when calling UpdateEmailCampaign., must be smaller than or equal to 50.');
        }
        if (!is_null($split_rule) && ($split_rule < 1)) {
            throw new \InvalidArgumentException('invalid value for $split_rule when calling UpdateEmailCampaign., must be bigger than or equal to 1.');
        }

        $this->container['split_rule'] = $split_rule;

        return $this;
    }

    /**
     * Gets winner_criteria
     *
     * @return string
     */
    public function getWinnerCriteria()
    {
        return $this->container['winner_criteria'];
    }

    /**
     * Sets winner_criteria
     *
     * @param string $winner_criteria Choose the metrics that will determinate the winning version. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed or alreday exist in record
     *
     * @return $this
     */
    public function setWinnerCriteria($winner_criteria)
    {
        $allowedValues = $this->getWinnerCriteriaAllowableValues();
        if (!is_null($winner_criteria) && !in_array($winner_criteria, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'winner_criteria', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['winner_criteria'] = $winner_criteria;

        return $this;
    }

    /**
     * Gets winner_delay
     *
     * @return int
     */
    public function getWinnerDelay()
    {
        return $this->container['winner_delay'];
    }

    /**
     * Sets winner_delay
     *
     * @param int $winner_delay Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed or alreday exist in record
     *
     * @return $this
     */
    public function setWinnerDelay($winner_delay)
    {

        if (!is_null($winner_delay) && ($winner_delay > 168)) {
            throw new \InvalidArgumentException('invalid value for $winner_delay when calling UpdateEmailCampaign., must be smaller than or equal to 168.');
        }
        if (!is_null($winner_delay) && ($winner_delay < 1)) {
            throw new \InvalidArgumentException('invalid value for $winner_delay when calling UpdateEmailCampaign., must be bigger than or equal to 1.');
        }

        $this->container['winner_delay'] = $winner_delay;

        return $this;
    }

    /**
     * Gets ip_warmup_enable
     *
     * @return bool
     */
    public function getIpWarmupEnable()
    {
        return $this->container['ip_warmup_enable'];
    }

    /**
     * Sets ip_warmup_enable
     *
     * @param bool $ip_warmup_enable Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
     *
     * @return $this
     */
    public function setIpWarmupEnable($ip_warmup_enable)
    {
        $this->container['ip_warmup_enable'] = $ip_warmup_enable;

        return $this;
    }

    /**
     * Gets initial_quota
     *
     * @return int
     */
    public function getInitialQuota()
    {
        return $this->container['initial_quota'];
    }

    /**
     * Sets initial_quota
     *
     * @param int $initial_quota Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
     *
     * @return $this
     */
    public function setInitialQuota($initial_quota)
    {
        $this->container['initial_quota'] = $initial_quota;

        return $this;
    }

    /**
     * Gets increase_rate
     *
     * @return int
     */
    public function getIncreaseRate()
    {
        return $this->container['increase_rate'];
    }

    /**
     * Sets increase_rate
     *
     * @param int $increase_rate Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
     *
     * @return $this
     */
    public function setIncreaseRate($increase_rate)
    {

        if (!is_null($increase_rate) && ($increase_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $increase_rate when calling UpdateEmailCampaign., must be smaller than or equal to 100.');
        }
        if (!is_null($increase_rate) && ($increase_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $increase_rate when calling UpdateEmailCampaign., must be bigger than or equal to 0.');
        }

        $this->container['increase_rate'] = $increase_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


