<?php
/**
 * RequestContactExportCustomContactFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  SendinBlue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SendinBlue\Client\Model;

use \ArrayAccess;
use \SendinBlue\Client\ObjectSerializer;

/**
 * RequestContactExportCustomContactFilter Class Doc Comment
 *
 * @category Class
 * @description Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.
 * @package  SendinBlue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestContactExportCustomContactFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'requestContactExport_customContactFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action_for_contacts' => 'string',
        'action_for_email_campaigns' => 'string',
        'action_for_sms_campaigns' => 'string',
        'list_id' => 'int',
        'email_campaign_id' => 'int',
        'sms_campaign_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action_for_contacts' => null,
        'action_for_email_campaigns' => null,
        'action_for_sms_campaigns' => null,
        'list_id' => 'int64',
        'email_campaign_id' => 'int64',
        'sms_campaign_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_for_contacts' => 'actionForContacts',
        'action_for_email_campaigns' => 'actionForEmailCampaigns',
        'action_for_sms_campaigns' => 'actionForSmsCampaigns',
        'list_id' => 'listId',
        'email_campaign_id' => 'emailCampaignId',
        'sms_campaign_id' => 'smsCampaignId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_for_contacts' => 'setActionForContacts',
        'action_for_email_campaigns' => 'setActionForEmailCampaigns',
        'action_for_sms_campaigns' => 'setActionForSmsCampaigns',
        'list_id' => 'setListId',
        'email_campaign_id' => 'setEmailCampaignId',
        'sms_campaign_id' => 'setSmsCampaignId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_for_contacts' => 'getActionForContacts',
        'action_for_email_campaigns' => 'getActionForEmailCampaigns',
        'action_for_sms_campaigns' => 'getActionForSmsCampaigns',
        'list_id' => 'getListId',
        'email_campaign_id' => 'getEmailCampaignId',
        'sms_campaign_id' => 'getSmsCampaignId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTION_FOR_CONTACTS_ALL_CONTACTS = 'allContacts';
    const ACTION_FOR_CONTACTS_SUBSCRIBED = 'subscribed';
    const ACTION_FOR_CONTACTS_UNSUBSCRIBED = 'unsubscribed';
    const ACTION_FOR_CONTACTS_UNSUBSCRIBED_PER_LIST = 'unsubscribedPerList';
    const ACTION_FOR_EMAIL_CAMPAIGNS_OPENERS = 'openers';
    const ACTION_FOR_EMAIL_CAMPAIGNS_NON_OPENERS = 'nonOpeners';
    const ACTION_FOR_EMAIL_CAMPAIGNS_CLICKERS = 'clickers';
    const ACTION_FOR_EMAIL_CAMPAIGNS_NON_CLICKERS = 'nonClickers';
    const ACTION_FOR_EMAIL_CAMPAIGNS_UNSUBSCRIBED = 'unsubscribed';
    const ACTION_FOR_EMAIL_CAMPAIGNS_HARD_BOUNCES = 'hardBounces';
    const ACTION_FOR_EMAIL_CAMPAIGNS_SOFT_BOUNCES = 'softBounces';
    const ACTION_FOR_SMS_CAMPAIGNS_HARD_BOUNCES = 'hardBounces';
    const ACTION_FOR_SMS_CAMPAIGNS_SOFT_BOUNCES = 'softBounces';
    const ACTION_FOR_SMS_CAMPAIGNS_UNSUBSCRIBED = 'unsubscribed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionForContactsAllowableValues()
    {
        return [
            self::ACTION_FOR_CONTACTS_ALL_CONTACTS,
            self::ACTION_FOR_CONTACTS_SUBSCRIBED,
            self::ACTION_FOR_CONTACTS_UNSUBSCRIBED,
            self::ACTION_FOR_CONTACTS_UNSUBSCRIBED_PER_LIST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionForEmailCampaignsAllowableValues()
    {
        return [
            self::ACTION_FOR_EMAIL_CAMPAIGNS_OPENERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_NON_OPENERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_CLICKERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_NON_CLICKERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_UNSUBSCRIBED,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_HARD_BOUNCES,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_SOFT_BOUNCES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionForSmsCampaignsAllowableValues()
    {
        return [
            self::ACTION_FOR_SMS_CAMPAIGNS_HARD_BOUNCES,
            self::ACTION_FOR_SMS_CAMPAIGNS_SOFT_BOUNCES,
            self::ACTION_FOR_SMS_CAMPAIGNS_UNSUBSCRIBED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_for_contacts'] = isset($data['action_for_contacts']) ? $data['action_for_contacts'] : null;
        $this->container['action_for_email_campaigns'] = isset($data['action_for_email_campaigns']) ? $data['action_for_email_campaigns'] : null;
        $this->container['action_for_sms_campaigns'] = isset($data['action_for_sms_campaigns']) ? $data['action_for_sms_campaigns'] : null;
        $this->container['list_id'] = isset($data['list_id']) ? $data['list_id'] : null;
        $this->container['email_campaign_id'] = isset($data['email_campaign_id']) ? $data['email_campaign_id'] : null;
        $this->container['sms_campaign_id'] = isset($data['sms_campaign_id']) ? $data['sms_campaign_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionForContactsAllowableValues();
        if (!is_null($this->container['action_for_contacts']) && !in_array($this->container['action_for_contacts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action_for_contacts', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionForEmailCampaignsAllowableValues();
        if (!is_null($this->container['action_for_email_campaigns']) && !in_array($this->container['action_for_email_campaigns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action_for_email_campaigns', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionForSmsCampaignsAllowableValues();
        if (!is_null($this->container['action_for_sms_campaigns']) && !in_array($this->container['action_for_sms_campaigns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action_for_sms_campaigns', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_for_contacts
     *
     * @return string
     */
    public function getActionForContacts()
    {
        return $this->container['action_for_contacts'];
    }

    /**
     * Sets action_for_contacts
     *
     * @param string $action_for_contacts Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed & unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.
     *
     * @return $this
     */
    public function setActionForContacts($action_for_contacts)
    {
        $allowedValues = $this->getActionForContactsAllowableValues();
        if (!is_null($action_for_contacts) && !in_array($action_for_contacts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action_for_contacts', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_for_contacts'] = $action_for_contacts;

        return $this;
    }

    /**
     * Gets action_for_email_campaigns
     *
     * @return string
     */
    public function getActionForEmailCampaigns()
    {
        return $this->container['action_for_email_campaigns'];
    }

    /**
     * Sets action_for_email_campaigns
     *
     * @param string $action_for_email_campaigns Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers & nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers & nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces & softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
     *
     * @return $this
     */
    public function setActionForEmailCampaigns($action_for_email_campaigns)
    {
        $allowedValues = $this->getActionForEmailCampaignsAllowableValues();
        if (!is_null($action_for_email_campaigns) && !in_array($action_for_email_campaigns, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action_for_email_campaigns', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_for_email_campaigns'] = $action_for_email_campaigns;

        return $this;
    }

    /**
     * Gets action_for_sms_campaigns
     *
     * @return string
     */
    public function getActionForSmsCampaigns()
    {
        return $this->container['action_for_sms_campaigns'];
    }

    /**
     * Sets action_for_sms_campaigns
     *
     * @param string $action_for_sms_campaigns Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces & softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
     *
     * @return $this
     */
    public function setActionForSmsCampaigns($action_for_sms_campaigns)
    {
        $allowedValues = $this->getActionForSmsCampaignsAllowableValues();
        if (!is_null($action_for_sms_campaigns) && !in_array($action_for_sms_campaigns, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action_for_sms_campaigns', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_for_sms_campaigns'] = $action_for_sms_campaigns;

        return $this;
    }

    /**
     * Gets list_id
     *
     * @return int
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param int $list_id Mandatory if actionForContacts is passed, ignored otherwise. Id of the list for which the corresponding action shall be applied in the filter.
     *
     * @return $this
     */
    public function setListId($list_id)
    {
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets email_campaign_id
     *
     * @return int
     */
    public function getEmailCampaignId()
    {
        return $this->container['email_campaign_id'];
    }

    /**
     * Sets email_campaign_id
     *
     * @param int $email_campaign_id Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.
     *
     * @return $this
     */
    public function setEmailCampaignId($email_campaign_id)
    {
        $this->container['email_campaign_id'] = $email_campaign_id;

        return $this;
    }

    /**
     * Gets sms_campaign_id
     *
     * @return int
     */
    public function getSmsCampaignId()
    {
        return $this->container['sms_campaign_id'];
    }

    /**
     * Sets sms_campaign_id
     *
     * @param int $sms_campaign_id Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
     *
     * @return $this
     */
    public function setSmsCampaignId($sms_campaign_id)
    {
        $this->container['sms_campaign_id'] = $sms_campaign_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


